//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\source\repos\Compilador\Compilador\Analizador.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilador {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexer : Lexer {
	public const int
		ACCESSM=1, PROGRAM=2, VAR=3, INT=4, PRINT=5, PLUS=6, SUBS=7, PROD=8, DIV=9, 
		AND=10, OR=11, NOT=12, GT=13, LT=14, GEQ=15, LEG=16, EQ=17, NEQ=18, ASSIGN=19, 
		PAREN_A=20, PAREN_C=21, LLAV_A=22, LLAV_C=23, CORCH_A=24, CORCH_C=25, 
		IDENTIFIER=26, INTEGERS=27, SEMICOLON=28, STRING=29, CHAR=30, ESC_SEQ=31, 
		Unknown=32, WS=33;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ACCESSM", "PROGRAM", "VAR", "INT", "PRINT", "PLUS", "SUBS", "PROD", "DIV", 
		"AND", "OR", "NOT", "GT", "LT", "GEQ", "LEG", "EQ", "NEQ", "ASSIGN", "PAREN_A", 
		"PAREN_C", "LLAV_A", "LLAV_C", "CORCH_A", "CORCH_C", "IDENTIFIER", "INTEGERS", 
		"SEMICOLON", "STRING", "CHAR", "ESC_SEQ", "Unknown", "WS"
	};


	    protected const int EOF = Eof;
	    protected const int HIDDEN = Hidden;


	public AnalizadorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'program'", "'var'", "'int'", "'print'", "'+'", "'-'", "'*'", 
		"'/'", "'&&'", "'||'", "'!'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
		"'='", "'('", "')'", "'{'", "'}'", "'['", "']'", null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESSM", "PROGRAM", "VAR", "INT", "PRINT", "PLUS", "SUBS", "PROD", 
		"DIV", "AND", "OR", "NOT", "GT", "LT", "GEQ", "LEG", "EQ", "NEQ", "ASSIGN", 
		"PAREN_A", "PAREN_C", "LLAV_A", "LLAV_C", "CORCH_A", "CORCH_C", "IDENTIFIER", 
		"INTEGERS", "SEMICOLON", "STRING", "CHAR", "ESC_SEQ", "Unknown", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Analizador.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2#\xF6\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x5\x2\\\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\a\x1B\xA4\n\x1B\f\x1B\xE\x1B\xA7\v\x1B"+
		"\x3\x1C\x6\x1C\xAA\n\x1C\r\x1C\xE\x1C\xAB\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\a\x1E\xB3\n\x1E\f\x1E\xE\x1E\xB6\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\xBD\n\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3"+
		"!\x3!\x6!\xC9\n!\r!\xE!\xCA\x3!\x3!\x6!\xCF\n!\r!\xE!\xD0\x3!\x6!\xD4"+
		"\n!\r!\xE!\xD5\x3!\x6!\xD9\n!\r!\xE!\xDA\x3!\x6!\xDE\n!\r!\xE!\xDF\x3"+
		"!\x6!\xE3\n!\r!\xE!\xE4\x3!\x6!\xE8\n!\r!\xE!\xE9\x3!\x6!\xED\n!\r!\xE"+
		"!\xEE\x5!\xF1\n!\x3\"\x3\"\x3\"\x3\"\x2\x2\x2#\x3\x2\x3\x5\x2\x4\a\x2"+
		"\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r"+
		"\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2"+
		"\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x3\x2\f\x5\x2"+
		"\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\x4\x2$$^"+
		"^\x4\x2))^^\n\x2$$))^^\x64\x64hhppttvv\x6\x2``\x62\x62\x80\x80\xFFFF\xFFFF"+
		"\x4\x2\x41\x41\xFFFF\xFFFF\a\x2\x41\x41\x61\x61\x63\x63||\xFFFF\xFFFF"+
		"\x4\x2\v\f\xF\xF\x10B\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2"+
		"\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37"+
		"\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3"+
		"\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x3[\x3\x2\x2\x2\x5]\x3"+
		"\x2\x2\x2\a\x65\x3\x2\x2\x2\ti\x3\x2\x2\x2\vm\x3\x2\x2\x2\rs\x3\x2\x2"+
		"\x2\xFu\x3\x2\x2\x2\x11w\x3\x2\x2\x2\x13y\x3\x2\x2\x2\x15{\x3\x2\x2\x2"+
		"\x17~\x3\x2\x2\x2\x19\x81\x3\x2\x2\x2\x1B\x83\x3\x2\x2\x2\x1D\x85\x3\x2"+
		"\x2\x2\x1F\x87\x3\x2\x2\x2!\x8A\x3\x2\x2\x2#\x8D\x3\x2\x2\x2%\x90\x3\x2"+
		"\x2\x2\'\x93\x3\x2\x2\x2)\x95\x3\x2\x2\x2+\x97\x3\x2\x2\x2-\x99\x3\x2"+
		"\x2\x2/\x9B\x3\x2\x2\x2\x31\x9D\x3\x2\x2\x2\x33\x9F\x3\x2\x2\x2\x35\xA1"+
		"\x3\x2\x2\x2\x37\xA9\x3\x2\x2\x2\x39\xAD\x3\x2\x2\x2;\xAF\x3\x2\x2\x2"+
		"=\xB9\x3\x2\x2\x2?\xC0\x3\x2\x2\x2\x41\xF0\x3\x2\x2\x2\x43\xF2\x3\x2\x2"+
		"\x2\x45\x46\ar\x2\x2\x46G\aw\x2\x2GH\a\x64\x2\x2HI\an\x2\x2IJ\ak\x2\x2"+
		"J\\\a\x65\x2\x2KL\ar\x2\x2LM\at\x2\x2MN\ak\x2\x2NO\ax\x2\x2OP\a\x63\x2"+
		"\x2PQ\av\x2\x2Q\\\ag\x2\x2RS\ar\x2\x2ST\at\x2\x2TU\aq\x2\x2UV\av\x2\x2"+
		"VW\ag\x2\x2WX\a\x65\x2\x2XY\av\x2\x2YZ\ag\x2\x2Z\\\a\x66\x2\x2[\x45\x3"+
		"\x2\x2\x2[K\x3\x2\x2\x2[R\x3\x2\x2\x2\\\x4\x3\x2\x2\x2]^\ar\x2\x2^_\a"+
		"t\x2\x2_`\aq\x2\x2`\x61\ai\x2\x2\x61\x62\at\x2\x2\x62\x63\a\x63\x2\x2"+
		"\x63\x64\ao\x2\x2\x64\x6\x3\x2\x2\x2\x65\x66\ax\x2\x2\x66g\a\x63\x2\x2"+
		"gh\at\x2\x2h\b\x3\x2\x2\x2ij\ak\x2\x2jk\ap\x2\x2kl\av\x2\x2l\n\x3\x2\x2"+
		"\x2mn\ar\x2\x2no\at\x2\x2op\ak\x2\x2pq\ap\x2\x2qr\av\x2\x2r\f\x3\x2\x2"+
		"\x2st\a-\x2\x2t\xE\x3\x2\x2\x2uv\a/\x2\x2v\x10\x3\x2\x2\x2wx\a,\x2\x2"+
		"x\x12\x3\x2\x2\x2yz\a\x31\x2\x2z\x14\x3\x2\x2\x2{|\a(\x2\x2|}\a(\x2\x2"+
		"}\x16\x3\x2\x2\x2~\x7F\a~\x2\x2\x7F\x80\a~\x2\x2\x80\x18\x3\x2\x2\x2\x81"+
		"\x82\a#\x2\x2\x82\x1A\x3\x2\x2\x2\x83\x84\a@\x2\x2\x84\x1C\x3\x2\x2\x2"+
		"\x85\x86\a>\x2\x2\x86\x1E\x3\x2\x2\x2\x87\x88\a@\x2\x2\x88\x89\a?\x2\x2"+
		"\x89 \x3\x2\x2\x2\x8A\x8B\a>\x2\x2\x8B\x8C\a?\x2\x2\x8C\"\x3\x2\x2\x2"+
		"\x8D\x8E\a?\x2\x2\x8E\x8F\a?\x2\x2\x8F$\x3\x2\x2\x2\x90\x91\a#\x2\x2\x91"+
		"\x92\a?\x2\x2\x92&\x3\x2\x2\x2\x93\x94\a?\x2\x2\x94(\x3\x2\x2\x2\x95\x96"+
		"\a*\x2\x2\x96*\x3\x2\x2\x2\x97\x98\a+\x2\x2\x98,\x3\x2\x2\x2\x99\x9A\a"+
		"}\x2\x2\x9A.\x3\x2\x2\x2\x9B\x9C\a\x7F\x2\x2\x9C\x30\x3\x2\x2\x2\x9D\x9E"+
		"\a]\x2\x2\x9E\x32\x3\x2\x2\x2\x9F\xA0\a_\x2\x2\xA0\x34\x3\x2\x2\x2\xA1"+
		"\xA5\t\x2\x2\x2\xA2\xA4\t\x3\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2"+
		"\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\x36\x3\x2\x2\x2\xA7\xA5"+
		"\x3\x2\x2\x2\xA8\xAA\t\x4\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2"+
		"\xAB\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\x38\x3\x2\x2\x2\xAD\xAE\a"+
		"=\x2\x2\xAE:\x3\x2\x2\x2\xAF\xB4\a$\x2\x2\xB0\xB3\x5? \x2\xB1\xB3\n\x5"+
		"\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4"+
		"\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB4\x3\x2"+
		"\x2\x2\xB7\xB8\a$\x2\x2\xB8<\x3\x2\x2\x2\xB9\xBC\a)\x2\x2\xBA\xBD\x5?"+
		" \x2\xBB\xBD\n\x6\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\xBE"+
		"\x3\x2\x2\x2\xBE\xBF\a)\x2\x2\xBF>\x3\x2\x2\x2\xC0\xC1\a^\x2\x2\xC1\xC2"+
		"\t\a\x2\x2\xC2@\x3\x2\x2\x2\xC3\xC4\a]\x2\x2\xC4\xC5\a>\x2\x2\xC5\xC6"+
		"\a}\x2\x2\xC6\xC7\a~\x2\x2\xC7\xC9\a_\x2\x2\xC8\xC3\x3\x2\x2\x2\xC9\xCA"+
		"\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xF1\x3\x2\x2"+
		"\x2\xCC\xF1\t\b\x2\x2\xCD\xCF\a\x41\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD0"+
		"\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xF1\x3\x2\x2"+
		"\x2\xD2\xD4\a\xFFFF\x2\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5"+
		"\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xF1\x3\x2\x2\x2\xD7\xD9\t\t\x2"+
		"\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB"+
		"\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDE\t\t\x2\x2\xDD\xDC\x3\x2\x2\x2"+
		"\xDE\xDF\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xF1\x3"+
		"\x2\x2\x2\xE1\xE3\a\xFFFF\x2\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2"+
		"\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xF1\x3\x2\x2\x2\xE6\xE8\t"+
		"\n\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9"+
		"\xEA\x3\x2\x2\x2\xEA\xF1\x3\x2\x2\x2\xEB\xED\t\n\x2\x2\xEC\xEB\x3\x2\x2"+
		"\x2\xED\xEE\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF1"+
		"\x3\x2\x2\x2\xF0\xC8\x3\x2\x2\x2\xF0\xCC\x3\x2\x2\x2\xF0\xCE\x3\x2\x2"+
		"\x2\xF0\xD3\x3\x2\x2\x2\xF0\xD8\x3\x2\x2\x2\xF0\xE2\x3\x2\x2\x2\xF0\xE7"+
		"\x3\x2\x2\x2\xF0\xEC\x3\x2\x2\x2\xF1\x42\x3\x2\x2\x2\xF2\xF3\t\v\x2\x2"+
		"\xF3\xF4\x3\x2\x2\x2\xF4\xF5\b\"\x2\x2\xF5\x44\x3\x2\x2\x2\x12\x2[\xA5"+
		"\xAB\xB2\xB4\xBC\xCA\xD0\xD5\xDA\xDF\xE4\xE9\xEE\xF0\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilador
